// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   @db.Text
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  price       Float
  originalPrice Float?
  image       String
  condition   String
  category    String
  location    String
  isAuction   Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  status      ProductStatus @default(ACTIVE)
  sellerId    String
  seller      User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  bids        Bid[]
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bid {
  id        String   @id @default(cuid())
  amount    Float
  status    BidStatus @default(PENDING)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  bidderId  String
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String   @id @default(cuid())
  total       Float
  status      OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  shippingAddress  Json?
  billingAddress   Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  SELLER
  ADMIN
}

enum ProductStatus {
  DRAFT
  ACTIVE
  SOLD
  ARCHIVED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  OUTBID
  WON
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}
